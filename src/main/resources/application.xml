<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="
           http://www.springframework.org/schema/beans    
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd  
           http://www.springframework.org/schema/context    
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 引入jdbc配置文件 -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:properties/jdbc.properties</value>
				<!--要是有多个配置文件，只需在这里继续添加即可 -->
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource"
		  class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- 使用properties来配置 -->
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
	</bean>

	<!--================= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- 拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="edit*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="move*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="list*" propagation="SUPPORTS" />
			<tx:method name="query*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="allManagerMethod" expression="execution(* com.vas.service..*.*(..))"/>
		<aop:advisor pointcut-ref="allManagerMethod" advice-ref="transactionAdvice"/>
	</aop:config>
	<!--================= 事务配置 End =================== -->

	<!-- 自动扫描了所有的XxxxMapper.xml对应的mapper接口文件，这样就不用一个一个手动配置Mpper的映射了，只要Mapper接口类和Mapper映射文件对应起来就可以了。 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.vas.mapper" />
	</bean>

	<!-- 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/vas/mapper/**/*Mapper.xml" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
	</bean>

	<!-- 自动扫描注解的bean -->
	<context:component-scan base-package="com.vas.service" />

	<!--<bean id="springContextUtil" class="com.vas.util.sys.SpringContextUtil"/>

	&lt;!&ndash; 初始化配制 &ndash;&gt;
	<bean id="initConfiguration" class="com.vas.util.sys.InitConfiguration"/>

	<bean id="multipartResolver"
		  class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		&lt;!&ndash;one of the properties available;the maximum upload size in bytes 10M &ndash;&gt;
		<property name="maxUploadSize" value="10485760" />
	</bean>

	&lt;!&ndash; 开启注解事务 &ndash;&gt;
	<task:annotation-driven />

	&lt;!&ndash; 自动扫描所有任务 &ndash;&gt;
	&lt;!&ndash;<context:component-scan base-package="com.vas.quartz" />&ndash;&gt;

	&lt;!&ndash; ====================Shiro start==================== &ndash;&gt;
	&lt;!&ndash; 缓存管理器 使用Ehcache实现 &ndash;&gt;
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:springshiro/ehcache-shiro.xml" />
	</bean>

	&lt;!&ndash; 凭证匹配器 &ndash;&gt;
	<bean id="credentialsMatcher" class="com.vas.util.login.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="cacheManager" />
		&lt;!&ndash; 散列算法 &ndash;&gt;
		<property name="hashAlgorithmName" value="md5" />
		&lt;!&ndash; 散列次数 &ndash;&gt;
		<property name="hashIterations" value="2" />
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>

	&lt;!&ndash; shiro filter &ndash;&gt;
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		&lt;!&ndash; 注入安全管理器 &ndash;&gt;
		<property name="securityManager" ref="securityManager" />
		&lt;!&ndash; 身份认证失败 认证提交的地址 &ndash;&gt;
		<property name="loginUrl" value="/login.jsp" />
		&lt;!&ndash; 权限认证失败 没有权限认证提交的地址 &ndash;&gt;
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		&lt;!&ndash; 登陆成功后的一面 &ndash;&gt;
		<property name="successUrl" value="/index.jsp" />
		&lt;!&ndash; 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 &ndash;&gt;
		<property name="filterChainDefinitions">
			<value>
				/login.html = anon
				/unauthorized = anon
				/backstage/**= anon
				/resource/**= anon
				/common/**= anon
				&lt;!&ndash;验证码&ndash;&gt;
				/shiro/validateCode = anon
				/shiro/login = anon
				/vasservice/** = anon
				&lt;!&ndash; 表示身份认证通过或通过记住我认证通过的可以访问 &ndash;&gt;
				/** = authc
			</value>
		</property>
	</bean>
	&lt;!&ndash; 自定义域realm &ndash;&gt;
	<bean id="customRealm" class="com.vas.util.login.CustomRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
	</bean>
	&lt;!&ndash; 安全管理器 ref对象 &ndash;&gt;
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="customRealm" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	&lt;!&ndash; 配置sessionManager &ndash;&gt;
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		&lt;!&ndash; 设置session超时时间，单位ms &ndash;&gt;
		<property name="globalSessionTimeout" value="3000000" />
		&lt;!&ndash; 删除过期session &ndash;&gt;
		<property name="deleteInvalidSessions" value="true" />
	</bean>
	&lt;!&ndash; Shiro生命周期处理器 &ndash;&gt;
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
	<bean
			class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>-->
	<!-- ====================Shiro end==================== -->
</beans>  